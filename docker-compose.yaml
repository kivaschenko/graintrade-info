name: graintraide
services:
  db:
    image: postgis/postgis:latest
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: A82mLC96RcvuEtZ5JRmFg
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  pgadmin4:
    image: elestio/pgadmin:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: kivaschenko@protonmail.com
      PGADMIN_DEFAULT_PASSWORD: eo9IeDl4+795lI90
      PGADMIN_LISTEN_PORT: 8080
    ports:
      - "5050:8080"
    volumes:
      - postgis:/var/lib/pgadmin4/servers.json
    depends_on:
      db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_config:/etc/rabbitmq
    ports:
      - "5672:5672" # RabbitMQ messaging port
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: SoYjysnlhorTtzj
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.4-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    build: ./backend
    image: backend:ci
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  notifications:
    build: ./notifications
    image: notifications:ci
    restart: always
    ports:
      - "8001:8000"
    volumes:
      - ./notifications:/notifications
    depends_on:
      - db
      - rabbitmq
      - backend
      - redis
  
  frontend:
    build: ./frontend
    image: frontend:ci
    restart: always
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/frontend
    depends_on:
      - backend

volumes:
  postgres_data:
  postgis:
  rabbitmq_data:
  rabbitmq_config:
  redis_data:
