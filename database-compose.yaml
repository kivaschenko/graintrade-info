name: graintrade
services:
  # db:
  #   image: postgis/postgis:17-3.5-alpine
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: test_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./postgres-init:/docker-entrypoint-initdb.d
  #   ports:
  #     - '35432:5432'
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U admin"]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

  # pgadmin4:
  #   image: elestio/pgadmin:latest
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@email.com
  #     PGADMIN_DEFAULT_PASSWORD: test_password
  #     PGADMIN_LISTEN_PORT: 8080
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - postgis:/var/lib/pgadmin4/servers.json
  #   depends_on:
  #     db:
  #       condition: service_healthy

  broker:
    image: apache/kafka-native:latest
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
  
  redis:
    image: redis:7.4-alpine
    command: redis-server --appendonly yes
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # mailhog:
  #   image: mailhog/mailhog:latest
  #   ports:
  #     - "1025:1025" # SMTP
  #     - "8025:8025" # Web UI
  #   volumes:
  #     - ./mailhog:/data
  
  # subscription-checker:
  #   build:
  #     context: ./cron_services
  #     dockerfile: Dockerfile
  #   environment:
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=test_password
  #     - POSTGRES_HOST=db
  #     - POSTGRES_PORT=5432
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   restart: unless-stopped


# volumes:
#   postgres_data:
#   postgis:

