"""First migration

Revision ID: b81acc65f4ca
Revises:
Create Date: 2025-06-19 10:05:18.669147

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b81acc65f4ca"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "messages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.String(), nullable=True),
        sa.Column("sender_id", sa.String(), nullable=True),
        sa.Column("receiver_id", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_messages_id"), "messages", ["id"], unique=False)
    op.create_index(op.f("ix_messages_item_id"), "messages", ["item_id"], unique=False)
    op.create_index(
        op.f("ix_messages_receiver_id"), "messages", ["receiver_id"], unique=False
    )
    op.create_index(
        op.f("ix_messages_sender_id"), "messages", ["sender_id"], unique=False
    )
    op.drop_table("items_users")
    op.drop_index(op.f("idx_tarifs_scope"), table_name="tarifs")
    op.drop_index(op.f("tarifs_scope_idx"), table_name="tarifs")
    op.drop_index(op.f("tarifs_terms_idx"), table_name="tarifs")
    op.drop_table("tarifs")
    op.drop_table("users")
    op.drop_index(op.f("categories_name_idx"), table_name="categories")
    op.drop_index(op.f("categories_ua_name_idx"), table_name="categories")
    op.drop_index(op.f("idx_categories_parent"), table_name="categories")
    op.drop_table("categories")
    op.drop_index(op.f("idx_subscriptions_status_end_date"), table_name="subscriptions")
    op.drop_table("subscriptions")
    op.drop_index(
        op.f("idx_payments_additional_info"),
        table_name="payments",
        postgresql_using="gin",
    )
    op.drop_index(op.f("idx_payments_created_at"), table_name="payments")
    op.drop_index(op.f("idx_payments_order_id"), table_name="payments")
    op.drop_index(op.f("idx_payments_order_status"), table_name="payments")
    op.drop_index(op.f("idx_payments_payment_id"), table_name="payments")
    op.drop_index(op.f("idx_payments_sender_email"), table_name="payments")
    op.drop_table("payments")
    op.drop_index(op.f("items_country_idx"), table_name="items")
    op.drop_index(op.f("items_created_at_idx"), table_name="items")
    op.drop_index(op.f("items_geom_idx"), table_name="items", postgresql_using="gist")
    op.drop_index(op.f("items_offer_type_idx"), table_name="items")
    op.drop_index(op.f("items_region_idx"), table_name="items")
    op.drop_table("items")
    op.drop_table("parent_categories")
    op.drop_table("spatial_ref_sys")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "spatial_ref_sys",
        sa.Column("srid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "auth_name", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("auth_srid", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "srtext", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column(
            "proj4text", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "srid > 0 AND srid <= 998999", name=op.f("spatial_ref_sys_srid_check")
        ),
        sa.PrimaryKeyConstraint("srid", name=op.f("spatial_ref_sys_pkey")),
    )
    op.create_table(
        "parent_categories",
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "ua_name", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("name", name="parent_categories_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "items",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('items_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("category_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "offer_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("title", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=600), autoincrement=False, nullable=True
        ),
        sa.Column(
            "price",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "currency", sa.VARCHAR(length=3), autoincrement=False, nullable=False
        ),
        sa.Column("amount", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "measure", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "terms_delivery", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "country", sa.VARCHAR(length=150), autoincrement=False, nullable=False
        ),
        sa.Column("region", sa.VARCHAR(length=150), autoincrement=False, nullable=True),
        sa.Column(
            "latitude",
            sa.NUMERIC(precision=9, scale=6),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "longitude",
            sa.NUMERIC(precision=9, scale=6),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("geom", sa.NullType(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.CheckConstraint("price > 0::numeric", name="positive_price"),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
            name="items_category_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="items_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(op.f("items_region_idx"), "items", ["region"], unique=False)
    op.create_index(op.f("items_offer_type_idx"), "items", ["offer_type"], unique=False)
    op.create_index(
        op.f("items_geom_idx"), "items", ["geom"], unique=False, postgresql_using="gist"
    )
    op.create_index(op.f("items_created_at_idx"), "items", ["created_at"], unique=False)
    op.create_index(op.f("items_country_idx"), "items", ["country"], unique=False)
    op.create_table(
        "payments",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("payment_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("order_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "order_status", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "currency", sa.VARCHAR(length=3), autoincrement=False, nullable=False
        ),
        sa.Column(
            "amount",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Payment amount in cents",
        ),
        sa.Column(
            "card_type", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("card_bin", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "masked_card", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "payment_system", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "sender_email", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "sender_cell_phone",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "approval_code", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "response_status",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "tran_type", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("eci", sa.VARCHAR(length=10), autoincrement=False, nullable=True),
        sa.Column(
            "settlement_amount",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "actual_amount", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "order_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "additional_info",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=False,
            comment="Additional payment details stored as JSON",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("payments_pkey")),
        sa.UniqueConstraint(
            "payment_id",
            name=op.f("payments_payment_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        comment="Stores payment transaction records from Fondy payment system",
    )
    op.create_index(
        op.f("idx_payments_sender_email"), "payments", ["sender_email"], unique=False
    )
    op.create_index(
        op.f("idx_payments_payment_id"), "payments", ["payment_id"], unique=False
    )
    op.create_index(
        op.f("idx_payments_order_status"), "payments", ["order_status"], unique=False
    )
    op.create_index(
        op.f("idx_payments_order_id"), "payments", ["order_id"], unique=False
    )
    op.create_index(
        op.f("idx_payments_created_at"), "payments", ["created_at"], unique=False
    )
    op.create_index(
        op.f("idx_payments_additional_info"),
        "payments",
        ["additional_info"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_table(
        "subscriptions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("tarif_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "start_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "end_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=50),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "order_id", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("payment_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "items_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "map_views",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "geo_search_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "navigation_count",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["tarif_id"],
            ["tarifs.id"],
            name=op.f("subscriptions_tarif_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("subscriptions_user_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subscriptions_pkey")),
    )
    op.create_index(
        op.f("idx_subscriptions_status_end_date"),
        "subscriptions",
        ["status", "end_date"],
        unique=False,
    )
    op.create_table(
        "categories",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('categories_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("ua_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("ua_description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "parent_category", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["parent_category"],
            ["parent_categories.name"],
            name="fk_parent_category",
            onupdate="CASCADE",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="categories_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        op.f("idx_categories_parent"), "categories", ["parent_category"], unique=False
    )
    op.create_index(
        op.f("categories_ua_name_idx"), "categories", ["ua_name"], unique=False
    )
    op.create_index(op.f("categories_name_idx"), "categories", ["name"], unique=False)
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('users_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "username", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("email", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "full_name", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column("phone", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "disabled",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint(
            "email",
            name="email_unique_constraint",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        sa.UniqueConstraint(
            "username",
            name="users_username_unique_constraint",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tarifs",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            sa.NUMERIC(precision=10, scale=2),
            server_default=sa.text("5.00"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "currency",
            sa.VARCHAR(length=3),
            server_default=sa.text("'EUR'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "scope",
            sa.VARCHAR(length=100),
            server_default=sa.text("'basic'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "terms",
            sa.VARCHAR(length=50),
            server_default=sa.text("'monthly'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("items_limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("map_views_limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("geo_search_limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("navigation_limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.CheckConstraint(
            "geo_search_limit >= 0", name=op.f("positive_geo_search_limit")
        ),
        sa.CheckConstraint("items_limit >= 0", name=op.f("positive_items_limit")),
        sa.CheckConstraint(
            "map_views_limit >= 0", name=op.f("positive_map_views_limit")
        ),
        sa.CheckConstraint(
            "navigation_limit >= 0", name=op.f("positive_navigation_limit")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("tarifs_pkey")),
        sa.UniqueConstraint(
            "name",
            name=op.f("tarifs_name_unique_constraint"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        sa.UniqueConstraint(
            "scope",
            name=op.f("tarifs_scope_unique_constraint"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("tarifs_terms_idx"), "tarifs", ["terms"], unique=False)
    op.create_index(op.f("tarifs_scope_idx"), "tarifs", ["scope"], unique=False)
    op.create_index(op.f("idx_tarifs_scope"), "tarifs", ["scope"], unique=False)
    op.create_table(
        "items_users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("item_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["item_id"], ["items.id"], name=op.f("items_users_item_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("items_users_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("items_users_pkey")),
    )
    op.drop_index(op.f("ix_messages_sender_id"), table_name="messages")
    op.drop_index(op.f("ix_messages_receiver_id"), table_name="messages")
    op.drop_index(op.f("ix_messages_item_id"), table_name="messages")
    op.drop_index(op.f("ix_messages_id"), table_name="messages")
    op.drop_table("messages")
    # ### end Alembic commands ###
